director_files = fromJSON(paste0(paths$current, "/imdb/writing.json"))
# unlist json file
json_file <- lapply(director_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# format json
writer_files = fromJSON(paste0(paths$current, "/imdb/writing.json"))
# unlist json file
json_file <- lapply(writer_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
directors = as.data.table(df)
# select tconst columns
train = as.data.table(dbGetQuery(con,
"SELECT tconst FROM train1
UNION
SELECT tconst FROM train2
UNION
SELECT tconst FROM train3
UNION
SELECT tconst FROM train4
UNION
SELECT tconst FROM train5
UNION
SELECT tconst FROM train6
UNION
SELECT tconst FROM train7
UNION
SELECT tconst FROM train8"))
train = merge(train, directors, by.x = "tconst", by.y = "movie", all.x = T)
View(train)
# functions
source(paste0(paths$current, "/main.R"))
# format json
writer_files = fromJSON(paste0(paths$current, "/imdb/writing.json"))
# unlist json file
json_file <- lapply(writer_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
directors = as.data.table(df)
# select tconst columns
train = as.data.table(dbGetQuery(con,
"SELECT tconst FROM train1
UNION
SELECT tconst FROM train2
UNION
SELECT tconst FROM train3
UNION
SELECT tconst FROM train4
UNION
SELECT tconst FROM train5
UNION
SELECT tconst FROM train6
UNION
SELECT tconst FROM train7
UNION
SELECT tconst FROM train8"))
train = merge(train, directors, by.x = "tconst", by.y = "movie", all.x = T)
?reshape
reshape()
# functions
source(paste0(paths$current, "/main.R"))
# format json
writer_files = fromJSON(paste0(paths$current, "/imdb/writing.json"))
# unlist json file
json_file <- lapply(writer_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
writers = as.data.table(df)
View(writers)
View(writers)
writers = reshape(dat1, idvar = "movie", timevar = "writer", direction = "wide")
writers = reshape(writers, idvar = "movie", timevar = "writer", direction = "wide")
View(writers)
dcast(dat1, movie ~ writer, value.var = "writer")
dcast(writers, movie ~ writer, value.var = "writer")
dcast(writers, movie, value.var = "writer")
test = dcast(writers, movie ~ writer, value.var = "writer")
View(test)
test = dcast(writers, movie ~ "col", value.var = "writer")
test = dcast(writers, movie ~ colname, value.var = "writer")
test = dcast(writers, movie, value.var = "writer")
test = dcast(writers, movie ~ "writer", value.var = "writer")
View(test)
writers = reshape(writers, idvar = "movie", timevar = "writer", direction = "wide")
test = dcast(writers, movie ~ "writer", value.var = "writer")
writers[, .N, by = "writer"]
writers[, .N, by = writer]
View(writers)
# from data frame to data table
writers = as.data.table(df)
writers = reshape(writers, idvar = "movie", timevar = "writer", direction = "wide")
# from data frame to data table
writers = as.data.table(df)
writers[, .N, by = writer]
writers[, .N, by = c(movie, writer)]
View(writers)
writers[, .N, by = c("movie", "writer")]
writers[, .N, by = movie]
setDT(writers)[, Index := seq_len(.N), by = movie]
View(writers)
test = dcast(writers, movie ~ paste0("writer", Index), value.var = "writer")
View(test)
unique(writers$Index)
unique(test$writer30)
unique(test$writer29)
unique(test$writer28)
unique(test$writer27)
unique(test[!is.na(writer29)]$movie)
unique(test[!is.na(writer28)]$movie)
unique(test[!is.na(writer27)]$movie)
train = merge(train, writers, by.x = "tconst", by.y = "movie", all.x = T)
writers = dcast(writers, movie ~ paste0("writer", Index), value.var = "writer")
train = merge(train, writers, by.x = "tconst", by.y = "movie", all.x = T)
# functions
source(paste0(paths$current, "/main.R"))
# format json
writer_files = fromJSON(paste0(paths$current, "/imdb/writing.json"))
# unlist json file
json_file <- lapply(writer_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
writers = as.data.table(df)
setDT(writers)[, Index := seq_len(.N), by = movie]
writers = dcast(writers, movie ~ paste0("writer", Index), value.var = "writer")
# select tconst columns
train = as.data.table(dbGetQuery(con,
"SELECT tconst FROM train1
UNION
SELECT tconst FROM train2
UNION
SELECT tconst FROM train3
UNION
SELECT tconst FROM train4
UNION
SELECT tconst FROM train5
UNION
SELECT tconst FROM train6
UNION
SELECT tconst FROM train7
UNION
SELECT tconst FROM train8"))
train = merge(train, writers, by.x = "tconst", by.y = "movie", all.x = T)
View(train)
unique(train$writer29)
# functions
source(paste0(paths$current, "/main.R"))
# format json
director_files = fromJSON(paste0(paths$current, "/imdb/directing.json"))
# unlist json file
json_file <- lapply(director_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
directors = as.data.table(df)
# select tconst columns
train = as.data.table(dbGetQuery(con,
"SELECT tconst FROM train1
UNION
SELECT tconst FROM train2
UNION
SELECT tconst FROM train3
UNION
SELECT tconst FROM train4
UNION
SELECT tconst FROM train5
UNION
SELECT tconst FROM train6
UNION
SELECT tconst FROM train7
UNION
SELECT tconst FROM train8"))
train = merge(train, directors, by.x = "tconst", by.y = "movie", all.x = T)
# paths
paths <- list()
paths[["current"]] <- getwd()
paths[["data"]] <- paste0(paths$current, "/db/")
# libraries
install.packages
library("DBI")
library("data.table")
library("jsonlite")
# connect database
con = dbConnect(duckdb::duckdb(), dbdir=paste0(paths$data, "db.duckdb"), read_only=FALSE)
# functions
source(paste0(paths$current, "/main.R"))
# format json
director_files = fromJSON(paste0(paths$current, "/imdb/directing.json"))
# unlist json file
json_file <- lapply(director_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
directors = as.data.table(df)
# select tconst columns
train = as.data.table(dbGetQuery(con,
"SELECT tconst FROM train1
UNION
SELECT tconst FROM train2
UNION
SELECT tconst FROM train3
UNION
SELECT tconst FROM train4
UNION
SELECT tconst FROM train5
UNION
SELECT tconst FROM train6
UNION
SELECT tconst FROM train7
UNION
SELECT tconst FROM train8"))
train = merge(train, directors, by.x = "tconst", by.y = "movie", all.x = T)
View(train)
dbWriteTable(con, "directors", train)
res = dbGetQuery(con, "SELECT * FROM directors ")
View(directors)
colnames(directors)
train = train[, director := as.factor(director)]
View(train)
install.packages(mltools)
install.packages("mltools")
# paths
paths <- list()
paths[["current"]] <- getwd()
paths[["data"]] <- paste0(paths$current, "/db/")
# libraries
install.packages
library("DBI")
library("data.table")
library("jsonlite")
library("mltools")
train = train[, director := one_hot(director)]
View(train)
train = train[, director := strtoi(director)]
View(train)
# functions
paths <- list()
paths[["current"]] <- getwd()
paths[["data"]] <- paste0(paths$current, "/db/")
source(paste0(paths$current, "/main.R"))
# format json
director_files = fromJSON(paste0(paths$current, "/imdb/directing.json"))
# unlist json file
json_file <- lapply(director_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
directors = as.data.table(df)
# select tconst columns
train = as.data.table(dbGetQuery(con,
"SELECT tconst FROM train1
UNION
SELECT tconst FROM train2
UNION
SELECT tconst FROM train3
UNION
SELECT tconst FROM train4
UNION
SELECT tconst FROM train5
UNION
SELECT tconst FROM train6
UNION
SELECT tconst FROM train7
UNION
SELECT tconst FROM train8"))
train = merge(train, directors, by.x = "tconst", by.y = "movie", all.x = T)
train = train[, director := strtoi(director, 16)]
View(train)
train$director = strtoi(train$director, 16)
# functions
paths <- list()
paths[["current"]] <- getwd()
paths[["data"]] <- paste0(paths$current, "/db/")
source(paste0(paths$current, "/main.R"))
# format json
director_files = fromJSON(paste0(paths$current, "/imdb/directing.json"))
# unlist json file
json_file <- lapply(director_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
directors = as.data.table(df)
# select tconst columns
train = as.data.table(dbGetQuery(con,
"SELECT tconst FROM train1
UNION
SELECT tconst FROM train2
UNION
SELECT tconst FROM train3
UNION
SELECT tconst FROM train4
UNION
SELECT tconst FROM train5
UNION
SELECT tconst FROM train6
UNION
SELECT tconst FROM train7
UNION
SELECT tconst FROM train8"))
train = merge(train, directors, by.x = "tconst", by.y = "movie", all.x = T)
train$director = strtoi(train$director, 16)
View(train)
install.packages("digest")
library("digest")
# functions
paths <- list()
paths[["current"]] <- getwd()
paths[["data"]] <- paste0(paths$current, "/db/")
source(paste0(paths$current, "/main.R"))
# format json
director_files = fromJSON(paste0(paths$current, "/imdb/directing.json"))
# unlist json file
json_file <- lapply(director_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
directors = as.data.table(df)
# select tconst columns
train = as.data.table(dbGetQuery(con,
"SELECT tconst FROM train1
UNION
SELECT tconst FROM train2
UNION
SELECT tconst FROM train3
UNION
SELECT tconst FROM train4
UNION
SELECT tconst FROM train5
UNION
SELECT tconst FROM train6
UNION
SELECT tconst FROM train7
UNION
SELECT tconst FROM train8"))
train = merge(train, directors, by.x = "tconst", by.y = "movie", all.x = T)
train$director = digest2int(train$director)
View(train)
train$director = as.factor(train$director)
View(train)
dbWriteTable(con, "directors", train)
# functions
source(paste0(paths$current, "/main.R"))
# format json
writer_files = fromJSON(paste0(paths$current, "/imdb/writing.json"))
# unlist json file
json_file <- lapply(writer_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
writers = as.data.table(df)
# set incremental index of writers to be used in dcast
setDT(writers)[, Index := seq_len(.N), by = movie]
# go from long to wide format
writers = dcast(writers, movie ~ paste0("writer", Index), value.var = "writer")
# select tconst columns
train = as.data.table(dbGetQuery(con,
"SELECT tconst FROM train1
UNION
SELECT tconst FROM train2
UNION
SELECT tconst FROM train3
UNION
SELECT tconst FROM train4
UNION
SELECT tconst FROM train5
UNION
SELECT tconst FROM train6
UNION
SELECT tconst FROM train7
UNION
SELECT tconst FROM train8"))
train = merge(train, writers, by.x = "tconst", by.y = "movie", all.x = T)
dbWriteTable(con, "writers", train, overwrite = TRUE)
# functions
paths <- list()
paths[["current"]] <- getwd()
paths[["data"]] <- paste0(paths$current, "/db/")
source(paste0(paths$current, "/main.R"))
# format json
director_files = fromJSON(paste0(paths$current, "/imdb/directing.json"))
# unlist json file
json_file <- lapply(director_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
directors = as.data.table(df)
# select tconst columns
train = as.data.table(dbGetQuery(con, "SELECT tconst FROM train"))
View(train)
train = merge(train, directors, by.x = "tconst", by.y = "movie", all.x = T)
unique(train$director)
?str_detect
??str_detect
library("stringr")
unique(train[str_detect(director, "nm")])
unique(train[, str_detect(director, "nm")])
View(train[str_detect(director, "nm") == FALSE])
# remove /n from directors
train = train[unique(train[, str_detect(director, "nm") == TRUE]
# remove /n from directors
train = train[str_detect(director, "nm") == TRUE]
# remove /n from directors
train = train[str_detect(director, "nm") == TRUE]
train = train[, str_remove(director, "nm")]
# functions
paths <- list()
paths[["current"]] <- getwd()
paths[["data"]] <- paste0(paths$current, "/db/")
source(paste0(paths$current, "/main.R"))
# format json
director_files = fromJSON(paste0(paths$current, "/imdb/directing.json"))
# unlist json file
json_file <- lapply(director_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
directors = as.data.table(df)
# select tconst columns
train = as.data.table(dbGetQuery(con, "SELECT tconst FROM train"))
train = merge(train, directors, by.x = "tconst", by.y = "movie", all.x = T)
# remove /n from directors
train = train[str_detect(director, "nm") == TRUE]
train = train[str_remove(director, "nm")]
View(train)
# functions
paths <- list()
paths[["current"]] <- getwd()
paths[["data"]] <- paste0(paths$current, "/db/")
source(paste0(paths$current, "/main.R"))
# format json
director_files = fromJSON(paste0(paths$current, "/imdb/directing.json"))
# unlist json file
json_file <- lapply(director_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
directors = as.data.table(df)
# select tconst columns
train = as.data.table(dbGetQuery(con, "SELECT tconst FROM train"))
train = merge(train, directors, by.x = "tconst", by.y = "movie", all.x = T)
# remove /n from directors
train = train[str_detect(director, "nm") == TRUE]
train = train[, director := str_remove(director, "nm")]
View(train)
train$director = as.factor(train$director)
View(train)
# functions
source(paste0(paths$current, "/main.R"))
# format json
writer_files = fromJSON(paste0(paths$current, "/imdb/writing.json"))
# unlist json file
json_file <- lapply(writer_files, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
# bind columns to create data frame
df <- as.data.frame(do.call("cbind", json_file))
# from data frame to data table
writers = as.data.table(df)
# set incremental index of writers to be used in dcast
setDT(writers)[, Index := seq_len(.N), by = movie]
# go from long to wide format
writers = dcast(writers, movie ~ paste0("writer", Index), value.var = "writer")
# select tconst columns
train = as.data.table(dbGetQuery(con, "SELECT tconst FROM train"))
train = merge(train, writers, by.x = "tconst", by.y = "movie", all.x = T)
View(train)
View(writers)
